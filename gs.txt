

### SETUP ENVIRONMENT ###
python3 -m venv venv
virtualenv venv -p python3.6
source venv/bin/activate
pip install pip --upgrade

### UFLOW ###
pip install -r git/uflow/requirements.txt
pip install tensorflow-gpu>=2.1.0
#############


###  SETUP DATASETS   ###
cd git

unzip ../datasets/KITTI_flow
python3 -m uflow.data_conversion_scripts.convert_KITTI_flow_to_tfrecords --data_dir=../datasets/KITTI_flow

python3 -m uflow.data_conversion_scripts.convert_KITTI_multiview_to_tfrecords --data_dir=../datasets/KITTI_flow_multiview

python3 -m uflow.uflow_main \
 --train_on="kitti:../datasets/KITTI_flow_multiview/KITTI_flow_multiview_train_384x1280-tfrecords" \
 --checkpoint_dir="models" \
 --use_tensorboard=true \
 --tensorboard_logdir="tensorboard" \
 --plot_dir="plot" \
 --epoch_length=10


  --eval_on="kitti:../datasets/KITTI_flow/KITTI_flow_testing-tfrecords" \
 --evaluate_during_train=true

    from_scratch

 flags.DEFINE_bool('evaluate_during_train', False,
 flags.DEFINE_string('train_on', '',
                    '"format0:path0;format1:path1", e.g. "kitti:/usr/..."')
flags.DEFINE_string('eval_on', '',
                    '"format0:path0;format1:path1", e.g. "kitti:/usr/..."')
flags.DEFINE_string('plot_dir', '', 'Path to directory where plots are saved.')
flags.DEFINE_string('checkpoint_dir', '',
                    'Path to directory for saving and restoring checkpoints.')
flags.DEFINE_string('init_checkpoint_dir', '',
                    'Path to directory for initializing from a checkpoint.')


use_tensorboard', False, 'Toggles logging to tensorboard.')
flags.DEFINE_string(
    'tensorboard_logdir

python3 -m uflow.uflow_evaluator --eval_on="kitti:../datasets/KITTI_flow/KITTI_flow_testing-tfrecords" --plot_dir=tensorboard --checkpoint_dir=models

tensorboard --logdir tensorboard
ssh -L 6006:localhost:6006 sommerl@aislogin.informatik.uni-freiburg.de
ssh -L 6006:localhost:6006 pearl9



### CONNECTION AIS PC-CLUSTER ###
ssh sommerl@aislogin.informatik.uni-freiburg.de
ssh-copy-id -i id_rsa_psiori.pub sommerl@aislogin.informatik.uni-freiburg.de
ssh-copy-id pearl9


###   STATS AIS PC-CLUSTER    ###

show disk space
df -h

show free memory (RAM)
free -m -h

show GPU
nvida-smi

show CPU:
lscpu

show CUDA version:
cat /usr/local/cuda/version.txt

show cudnn version:
cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2

q: tensorflow requires cudnn to run, but on pearl pcs there is no cudnn installation by default?

### install cudnn locally###

scp ~/Downloads/cudnn-10.1-linux-x64-v7.6.5.32.tgz sommerl@aislogin.informatik.uni-freiburg.de

tar -xzvf cudnn-x.x-linux-x64-v8.x.x.x.tgz

Copy the following files into the CUDA Toolkit directory, and change the file permissions.

cp cuda/include/cudnn*.h ~/.local/cuda/include
cp cuda/lib64/libcudnn* ~/.local/cuda/lib64
chmod a+r ~/.local/cuda/include/cudnn*.h ~/.local/cuda/lib64/libcudnn*


Add the library to your environment. This is typically done adding this following two lines to your ~/.bashrc file (in this example, the <CUDA> directory was ~/cuda9/:

export PATH=~/.local/cuda/bin:$PATH
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/.local/cuda/lib64/

### install cuda locally###
wget http://developer.download.nvidia.com/compute/cuda/11.0.1/local_installers/cuda_11.0.1_450.36.06_linux.run
sh cuda_11.0.1_450.36.06_linux.run

##### not working because i have no rights :/ ######

1: nano ~/.ssh/config

2: add to file:
Host *
    StrictHostKeyChecking no

3: change rights
sudo chmod 400 ~/.ssh/config